-- DROP DATABASE ideal;

-- MySQL Script generated by MySQL Workbench
-- Thu Apr 18 16:00:14 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ideal
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `ideal` ;

-- -----------------------------------------------------
-- Schema ideal
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ideal` DEFAULT CHARACTER SET utf8 ;
USE `ideal` ;

-- -----------------------------------------------------
-- Table `ideal`.`Rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Roles` (
  `RolID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del rol',
  PRIMARY KEY (`RolID`)
) ENGINE = InnoDB COMMENT = 'Tabla de roles de usuario';

-- -----------------------------------------------------
-- Table `ideal`.`ColorFondo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`ColorFondo` (
  `ColorID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del color',
  `NombreColor` VARCHAR(20) NOT NULL COMMENT 'Nombre del color',
  `CodigoHexadecimal` VARCHAR(7) NOT NULL COMMENT 'Código hexadecimal del color',
  PRIMARY KEY (`ColorID`)
) ENGINE = InnoDB COMMENT = 'Tabla de colores de fondo';

-- -----------------------------------------------------
-- Table `ideal`.`Usuario`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `ideal`.`Usuarios` (
  `UsuarioID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del usuario',
  `Nombres` VARCHAR(100) NULL COMMENT 'Nombres del usuario',
  `Apellidos` VARCHAR(100) NULL COMMENT 'Apellidos del usuario',
  `DNI` INT(8) NULL COMMENT 'Documento de identidad del usuario',
  `Correo` VARCHAR(50) NOT NULL COMMENT 'Correo electrónico del usuario',
  `Telefono` INT NULL COMMENT 'Número de teléfono del usuario',
  `Direccion` VARCHAR(105) NULL COMMENT 'Dirección del usuario',
  `Password` VARCHAR(100) NOT NULL COMMENT 'Contraseña del usuario',
  `RolID` INT NOT NULL COMMENT 'Rol del usuario',
  `FechaCreacion` DATETIME NULL COMMENT 'Fecha de creación del usuario',
  `UltimaActividad` DATETIME NULL COMMENT 'Última actividad del usuario',
  `ContratoArrendamiento` LONGBLOB NULL COMMENT 'Contrato de arrendamiento del usuario',
  `DocumentacionLegal` LONGBLOB NULL COMMENT 'Documentación legal del usuario',
  `FotoUsuario` LONGBLOB NULL COMMENT 'Foto del usuario',
  `ColorID` INT NULL COMMENT 'ID del color de fondo preferido por el usuario',
  `PremiumStatus` TINYINT NOT NULL DEFAULT 0 COMMENT 'Indica si el usuario tiene características premium activas (0 para no, 1 para sí)',
  `FechaInicioPremium` DATETIME NULL COMMENT 'Fecha de inicio de la membresía premium del usuario',
  `FechaVencimientoPremium` DATETIME NULL COMMENT 'Fecha de vencimiento de la membresía premium del usuario',
  `EstadoSesion` TINYINT NOT NULL DEFAULT 0 COMMENT 'Estado del inicio de sesión del usuario (0 para no iniciada, 1 para iniciada)',
  `CorreoVerificado` TINYINT DEFAULT 0 COMMENT 'Indica si el correo electrónico del usuario ha sido verificado',
  `Estado` TINYINT NOT NULL DEFAULT 1 COMMENT 'Estado del usuario (0 para eliminado, 1 para activo)',
  PRIMARY KEY (`UsuarioID`),
  UNIQUE KEY `Correo_UNIQUE` (`Correo`),
  CONSTRAINT `FK_Usuarios_Roles` 
	  FOREIGN KEY (`RolID`) 
	  REFERENCES `ideal`.`Roles` (`RolID`) 
	  ON DELETE NO ACTION 
	  ON UPDATE NO ACTION,
  CONSTRAINT `FK_Usuarios_ColorFondo` 
	  FOREIGN KEY (`ColorID`) 
	  REFERENCES `ideal`.`ColorFondo` (`ColorID`) 
	  ON DELETE NO ACTION 
	  ON UPDATE NO ACTION  
) ENGINE = InnoDB COMMENT = 'Tabla de usuarios registrados';


-- -----------------------------------------------------
-- Table `ideal`.`VerificacionCorreo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`VerificacionCorreo` (
  `TokenID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del token',
  `UsuarioID` INT NOT NULL COMMENT 'Identificador del usuario asociado con el token',
  `Token` VARCHAR(100) NOT NULL COMMENT 'El token único generado para la verificación',
  `FechaCreacion` DATETIME NOT NULL COMMENT 'Fecha y hora en que se creó el token',
  `FechaExpiracion` DATETIME NOT NULL COMMENT 'Fecha y hora en que expira el token',
  `EstadoToken` ENUM('Pendiente', 'Utilizado') NOT NULL DEFAULT 'Pendiente' COMMENT 'Estado del token',
  `NumeroIntentos` INT NOT NULL DEFAULT 0 COMMENT 'Número de intentos de uso del token',
  `TipoToken` ENUM('VerificacionCorreo', 'ResetPassword') NOT NULL COMMENT 'Tipo de token',
  `AsuntoCorreo` VARCHAR(255) NULL COMMENT 'Asunto del correo electrónico',
  `ContenidoCorreo` TEXT NULL COMMENT 'Contenido del correo electrónico',
  PRIMARY KEY (`TokenID`),
  INDEX `FK_VerificacionCorreo_Usuarios_idx` (`UsuarioID` ASC),
  CONSTRAINT `FK_VerificacionCorreo_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE = InnoDB COMMENT = 'Tabla de verificación de correo electrónico';


-- -----------------------------------------------------
-- Table `ideal`.`Servicio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Servicios` (
  `ServicioID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del servicio',
  PRIMARY KEY (`ServicioID`)
) ENGINE = InnoDB COMMENT = 'Tabla de servicios disponibles';

-- -----------------------------------------------------
-- Table `ideal`.`Departamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Departamentos` (
  `DepartamentoID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre del departamento',
  PRIMARY KEY (`DepartamentoID`)
) ENGINE = InnoDB COMMENT = 'Tabla de departamentos';
-- -----------------------------------------------------
-- Table `ideal`.`Provincia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Provincias` (
  `ProvinciaID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre de la provincia',
  `DepartamentoID` INT NOT NULL COMMENT 'ID del departamento al que pertenece la provincia',
  PRIMARY KEY (`ProvinciaID`),
  INDEX `FK_Provincias_Departamentos_idx` (`DepartamentoID` ASC),
  CONSTRAINT `FK_Provincias_Departamentos`
    FOREIGN KEY (`DepartamentoID`)
    REFERENCES `ideal`.`Departamentos` (`DepartamentoID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de provincias';

-- -----------------------------------------------------
-- Table `ideal`.`Distrito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Distritos` (
  `DistritoID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre del distrito',
  `ProvinciaID` INT NOT NULL COMMENT 'ID de la provincia a la que pertenece el distrito',
  PRIMARY KEY (`DistritoID`),
  INDEX `FK_Distritos_Provincias_idx` (`ProvinciaID` ASC),
  CONSTRAINT `FK_Distritos_Provincias`
    FOREIGN KEY (`ProvinciaID`)
    REFERENCES `ideal`.`Provincias` (`ProvinciaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de distritos';

-- -----------------------------------------------------
-- Table `ideal`.`Institucion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Instituciones` (
  `InstitucionID` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(150) NOT NULL COMMENT 'Nombre de la institución',
  `Abreviacion` VARCHAR(35) NOT NULL COMMENT 'Abreviación de la institución',
  PRIMARY KEY (`InstitucionID`)
) ENGINE = InnoDB COMMENT = 'Tabla de instituciones';

-- -----------------------------------------------------
-- Table `ideal`.`Pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`TipoPago` (
  `TipoPagoID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del tipo de pago',
  `Nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre del tipo de pago',
  `Descripcion` VARCHAR(255) NULL COMMENT 'Descripción del tipo de pago',
  PRIMARY KEY (`TipoPagoID`)
) ENGINE = InnoDB COMMENT = 'Tabla de tipos de pago';


CREATE TABLE IF NOT EXISTS `ideal`.`PagosAdicionales` (
  `PagoAdicionalID` INT NOT NULL AUTO_INCREMENT,
  `ArrendadorID` INT NOT NULL COMMENT 'ID del arrendador',
  `TipoPagoID` INT NOT NULL COMMENT 'ID del tipo de pago adicional',
  `FechaInicio` DATE NOT NULL COMMENT 'Fecha de inicio del beneficio',
  `FechaVencimiento` DATE NOT NULL COMMENT 'Fecha de vencimiento del beneficio',
  `Monto` DECIMAL(10,2) NOT NULL COMMENT 'Monto del pago adicional',
  `FechaHoraPago` DATETIME NULL COMMENT 'Fecha y hora en que se realizó el pago',
  `EstadoPago` ENUM('Pendiente', 'Completado', 'Cancelado') NULL DEFAULT 'Pendiente' COMMENT 'Estado del pago adicional',
  `IDTransaccionPayPal` VARCHAR(50) NULL COMMENT 'ID de transacción proporcionado por PayPal',
  `EstadoTransaccionPayPal` ENUM('Pendiente', 'Completado', 'Cancelado') NULL COMMENT 'Estado de la transacción con PayPal',
  PRIMARY KEY (`PagoAdicionalID`),
  FOREIGN KEY (`ArrendadorID`) REFERENCES `Usuarios` (`UsuarioID`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`TipoPagoID`) REFERENCES `TipoPago` (`TipoPagoID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB COMMENT = 'Tabla de pagos adicionales recurrentes';


-- -----------------------------------------------------
-- Table `ideal`.`Cuarto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Cuartos` (
  `CuartoID` INT NOT NULL AUTO_INCREMENT,
  `UsuarioID` INT NOT NULL COMMENT 'ID del usuario que publica el cuarto',
  `Titulo` VARCHAR(50) NOT NULL COMMENT 'Título del anuncio del cuarto',
  `Descripcion` VARCHAR(100) NULL COMMENT 'Descripción del cuarto',
  `Direccion` VARCHAR(50) NULL COMMENT 'Dirección del cuarto',
  `Precio` DECIMAL(10,2) NOT NULL COMMENT 'Precio del alquiler del cuarto',
  `TarifaAdicional` DECIMAL(10,2) NULL COMMENT 'Tarifa adicional por servicios',
  `FechaPublicacion` DATETIME NULL COMMENT 'Fecha de publicación del anuncio',
  `FechaExpiracion` DATETIME NULL COMMENT 'Fecha de expiración del anuncio',
  `Visible` TINYINT NOT NULL COMMENT 'Indica si la oferta es visible o no (0 para no visible, 1 para visible)',
  `PagoAdicionalID` INT NULL COMMENT 'ID del pago adicional asociado a la visibilidad del cuarto',
  `Fotos` VARCHAR(45) NOT NULL COMMENT 'URLs de las fotos del cuarto',
  `Baño` BOOLEAN NOT NULL COMMENT 'Indica si el cuarto tiene baño propio (1 para sí, 0 para no)',
  `ServicioID` INT NOT NULL COMMENT 'ID del servicio ofrecido en el cuarto',
  `InstitucionID` INT NOT NULL COMMENT 'ID de la institución cercana al cuarto',
  `DistritoID` INT NOT NULL COMMENT 'ID del distrito donde se ubica el cuarto',
  PRIMARY KEY (`CuartoID`),
  INDEX `FK_Cuartos_Usuarios_idx` (`UsuarioID` ASC),
  INDEX `FK_Cuartos_Servicios_idx` (`ServicioID` ASC),
  INDEX `FK_Cuartos_Instituciones_idx` (`InstitucionID` ASC),
  INDEX `FK_Cuartos_Distritos_idx` (`DistritoID` ASC),
  CONSTRAINT `FK_Cuartos_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Cuartos_Servicios`
    FOREIGN KEY (`ServicioID`)
    REFERENCES `ideal`.`Servicios` (`ServicioID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Cuartos_Instituciones`
    FOREIGN KEY (`InstitucionID`)
    REFERENCES `ideal`.`Instituciones` (`InstitucionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Cuartos_Distritos`
    FOREIGN KEY (`DistritoID`)
    REFERENCES `ideal`.`Distritos` (`DistritoID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Cuartos_PagosAdicionales`
	FOREIGN KEY (`PagoAdicionalID`)
	REFERENCES `ideal`.`PagosAdicionales` (`PagoAdicionalID`)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de cuartos en alquiler';


-- -----------------------------------------------------
-- Table `ideal`.`Reseña`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Reseñas` (
  `ReseñaID` INT NOT NULL AUTO_INCREMENT,
  `Comentario` VARCHAR(255) NULL COMMENT 'Comentario sobre el cuarto',
  `CuartoID` INT NOT NULL COMMENT 'ID del cuarto evaluado',
  `UsuarioID` INT NOT NULL COMMENT 'ID del usuario que realiza la reseña',
  `Puntuacion` INT NULL COMMENT 'Puntuación del cuarto (opcional)',
  `FechaCreacion` DATETIME NULL COMMENT 'Fecha de creación de la reseña',
  `FechaModificacion` DATETIME NULL COMMENT 'Fecha de última modificación de la reseña',
  PRIMARY KEY (`ReseñaID`),
  INDEX `FK_Reseñas_Usuarios_idx` (`UsuarioID` ASC),
  INDEX `FK_Reseñas_Cuartos_idx` (`CuartoID` ASC),
  CONSTRAINT `FK_Reseñas_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Reseñas_Cuartos`
    FOREIGN KEY (`CuartoID`)
    REFERENCES `ideal`.`Cuartos` (`CuartoID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de reseñas de cuartos';

-- -----------------------------------------------------
-- Table `ideal`.`ComentariosReseñas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`ComentariosReseñas` (
  `ComentarioID` INT NOT NULL AUTO_INCREMENT,
  `Comentario` VARCHAR(255) NOT NULL COMMENT 'Comentario sobre la reseña',
  `ReseñaID` INT NOT NULL COMMENT 'ID de la reseña a la que pertenece el comentario',
  `UsuarioID` INT NOT NULL COMMENT 'ID del usuario que realiza el comentario',
  `FechaCreacion` DATETIME NOT NULL COMMENT 'Fecha de creación del comentario',
  PRIMARY KEY (`ComentarioID`),
  INDEX `FK_ComentariosReseñas_Reseñas_idx` (`ReseñaID` ASC),
  INDEX `FK_ComentariosReseñas_Usuarios_idx` (`UsuarioID` ASC),
  CONSTRAINT `FK_ComentariosReseñas_Reseñas`
    FOREIGN KEY (`ReseñaID`)
    REFERENCES `ideal`.`Reseñas` (`ReseñaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ComentariosReseñas_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de comentarios sobre reseñas de cuartos';

-- -----------------------------------------------------
-- Table `ideal`.`Reserva`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Reservas` (
  `ReservaID` INT NOT NULL AUTO_INCREMENT,
  `UsuarioID` INT NOT NULL COMMENT 'ID del usuario que realiza la reserva',
  `CuartoID` INT NULL COMMENT 'ID del cuarto reservado',
  `Estado` TINYINT NULL COMMENT 'Estado de la reserva',
  `FechaInicio` DATE NULL COMMENT 'Fecha de inicio de la reserva',
  `FechaFin` DATE NULL COMMENT 'Fecha de fin de la reserva',
  `FechaSolicitud` TIMESTAMP(1) NULL COMMENT 'Fecha de solicitud de reserva',
  PRIMARY KEY (`ReservaID`),
  INDEX `FK_Reservas_Usuarios_idx` (`UsuarioID` ASC),
  INDEX `FK_Reservas_Cuartos_idx` (`CuartoID` ASC),
  CONSTRAINT `FK_Reservas_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Reservas_Cuartos`
    FOREIGN KEY (`CuartoID`)
    REFERENCES `ideal`.`Cuartos` (`CuartoID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB COMMENT = 'Tabla de reservas de cuartos';

-- -----------------------------------------------------
-- Table `ideal`.`PagosReserva`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `ideal`.`PagosReserva` (
  `PagoReservaID` INT NOT NULL AUTO_INCREMENT,
  `ReservaID` INT NOT NULL COMMENT 'ID de la reserva asociada al pago',
  `Monto` DECIMAL(10,2) NOT NULL COMMENT 'Monto pagado por la reserva',
  `FechaHoraPago` DATETIME NOT NULL COMMENT 'Fecha y hora en que se realizó el pago',
  `EstadoPago` ENUM('Pendiente', 'Completado', 'Cancelado') NOT NULL DEFAULT 'Pendiente' COMMENT 'Estado del pago de la reserva',
  `IDTransaccionPayPal` VARCHAR(50) NULL COMMENT 'ID de transacción proporcionado por PayPal',
  `EstadoTransaccionPayPal` ENUM('Pendiente', 'Completado', 'Cancelado') NULL COMMENT 'Estado de la transacción con PayPal',
  PRIMARY KEY (`PagoReservaID`),
  INDEX `FK_PagosReserva_Reservas_idx` (`ReservaID` ASC),
  CONSTRAINT `FK_PagosReserva_Reservas`
    FOREIGN KEY (`ReservaID`)
    REFERENCES `ideal`.`Reservas` (`ReservaID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE = InnoDB COMMENT = 'Tabla de pagos de reservas';

-- -----------------------------------------------------
-- Table `ideal`.`Favorito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ideal`.`Favoritos` (
  `FavoritoID` INT NOT NULL AUTO_INCREMENT,
  `UsuarioID` INT NOT NULL COMMENT 'ID del usuario que guarda como favorito',
  `CuartoID` INT NOT NULL COMMENT 'ID del cuarto marcado como favorito',
  PRIMARY KEY (`FavoritoID`),
  INDEX `FK_Favoritos_Usuarios_idx` (`UsuarioID` ASC),
  INDEX `FK_Favoritos_Cuartos_idx` (`CuartoID` ASC),
  CONSTRAINT `FK_Favoritos_Usuarios`
    FOREIGN KEY (`UsuarioID`)
    REFERENCES `ideal`.`Usuarios` (`UsuarioID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_Favoritos_Cuartos`
    FOREIGN KEY (`CuartoID`)
    REFERENCES `ideal`.`Cuartos` (`CuartoID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE = InnoDB COMMENT = 'Tabla de cuartos marcados como favoritos';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
